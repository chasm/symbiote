{"version":3,"file":"/packages/roles.js","sources":["roles/roles_server.js","roles/roles_common.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,e;;;AAGA,G;AACA,oE;AACA,sC;AACA,G;AACA,oB;AACA,+C;;AAEA,gD;AACA,gD;AACA,C;;;AAGA,G;AACA,uD;AACA,mB;AACA,G;AACA,kC;AACA,2B;AACA,wB;;AAEA,0D;AACA,E;;AAEA,K;;;;;;;;;;;;;;;;;;;AC1BA,e;;AAEA,G;AACA,uG;AACA,E;AACA,gB;AACA,G;;AAEA,G;AACA,oE;AACA,sC;AACA,G;AACA,oB;AACA,+C;AACA,C;;;AAGA,G;AACA,oF;AACA,S;AACA,4F;AACA,yG;AACA,E;AACA,e;AACA,e;AACA,G;AACA,mC;AACA,Y;AACA,C;;AAEA,G;AACA,iD;AACA,E;AACA,qB;AACA,oC;AACA,kC;AACA,G;AACA,oC;AACA,S;AACA,W;;AAEA,W;AACA,iC;AACA,oC;AACA,U;AACA,G;;AAEA,O;AACA,kD;AACA,a;AACA,e;AACA,8D;AACA,sC;AACA,yE;AACA,wC;AACA,sE;AACA,uB;AACA,yC;AACA,yD;AACA,W;AACA,G;AACA,C;;AAEA,G;AACA,wE;AACA,6C;AACA,E;AACA,qB;AACA,oC;AACA,G;AACA,oC;AACA,e;AACA,U;AACA,G;;AAEA,gF;;AAEA,0B;AACA,8C;AACA,G;;AAEA,qD;AACA,iB;AACA,8C;AACA,G;AACA,E;;AAEA,G;AACA,mD;AACA,E;AACA,6B;AACA,0C;AACA,0B;AACA,E;AACA,0B;AACA,6D;AACA,+D;AACA,G;AACA,iD;AACA,uD;AACA,uD;;AAEA,mB;;AAEA,kB;AACA,wC;AACA,wC;;AAEA,yB;AACA,iD;AACA,e;AACA,mC;AACA,iC;AACA,4B;AACA,K;AACA,e;AACA,Q;;AAEA,2B;AACA,U;AACA,G;;AAEA,iD;AACA,iF;AACA,0B;AACA,e;AACA,Q;AACA,iC;AACA,+B;AACA,4B;AACA,K;AACA,I;;AAEA,0C;AACA,wB;AACA,mC;AACA,8E;AACA,0B;AACA,4B;AACA,mD;AACA,2B;AACA,O;AACA,M;AACA,U;AACA,2E;AACA,wB;AACA,oC;AACA,iD;AACA,yB;AACA,K;AACA,G;AACA,C;;AAEA,G;AACA,0B;AACA,E;AACA,+B;AACA,6D;AACA,+D;AACA,G;AACA,sD;AACA,uD;AACA,uD;;AAEA,kB;AACA,wC;AACA,wC;;AAEA,4C;AACA,wB;AACA,4E;AACA,mC;AACA,0B;AACA,2B;AACA,uC;AACA,yB;AACA,O;AACA,M;AACA,U;AACA,2E;AACA,wB;AACA,qC;AACA,qC;AACA,uB;AACA,K;AACA,G;AACA,C;;AAEA,G;AACA,2B;AACA,E;AACA,uB;AACA,+D;AACA,qI;AACA,iE;AACA,G;AACA,6C;AACA,S;AACA,e;;AAEA,kC;AACA,0B;AACA,mB;AACA,G;;AAEA,c;AACA,gB;AACA,wC;AACA,0B;AACA,+B;AACA,4C;AACA,0C;AACA,Q;AACA,K;AACA,mD;AACA,iB;AACA,wC;AACA,a;AACA,G;;AAEA,uB;;AAEA,8B;AACA,uC;AACA,c;AACA,G;AACA,C;;AAEA,G;AACA,uB;AACA,E;AACA,0B;AACA,kC;AACA,kD;AACA,G;AACA,yC;AACA,kC;AACA,iB;AACA,uB;AACA,G;;AAEA,sC;AACA,C;;AAEA,G;AACA,8B;AACA,E;AACA,sB;AACA,4C;AACA,G;AACA,iC;AACA,qD;AACA,C;;AAEA,G;AACA,4C;AACA,E;AACA,yB;AACA,oC;AACA,2C;AACA,G;AACA,wC;AACA,2B;AACA,8B;AACA,G;AACA,C;;AAEA,K","sourcesContent":[";(function () {\n\n\n/**\n * Roles collection documents consist only of an id and a role name.\n *   ex: { _id:<uuid>, name: \"admin\" }\n */\nif (!Meteor.roles) {\n  Meteor.roles = new Meteor.Collection(\"roles\")\n\n  // Create default indexes for roles collection\n  Meteor.roles._ensureIndex('name', {unique: 1})\n}\n\n\n/**\n * Always publish logged-in user's roles so client-side\n * checks can work.\n */\nMeteor.publish(null, function () {\n  var userId = this.userId,\n      fields = {roles:1}\n\n  return Meteor.users.find({_id:userId}, {fields: fields})\n})\n\n}());\n",";(function () {\n\n/**\n * Provides functions related to user authorization. Compatible with built-in Meteor accounts packages.\n *\n * @module Roles\n */\n\n/**\n * Roles collection documents consist only of an id and a role name.\n *   ex: { _id:<uuid>, name: \"admin\" }\n */\nif (!Meteor.roles) {\n  Meteor.roles = new Meteor.Collection(\"roles\")\n}\n\n\n/**\n * <p>Role-based authorization compatible with built-in Meteor accounts package.</p>\n * <br />\n * <p>Uses 'roles' collection to store existing roles with unique index on 'name' field.</p>\n * <p>Adds a 'roles' field to user objects in 'users' collection when they are added to a given role.</p>\n *\n * @class Roles\n * @constructor\n */\nif ('undefined' === typeof Roles) {\n  Roles = {}\n}\n\n/**\n * Create a new role. Whitespace will be trimmed.\n *\n * @method createRole\n * @param {String} role Name of role\n * @return {String} id of new role\n */\nRoles.createRole = function (role) {\n  var id,\n      match\n\n  if (!role\n      || 'string' !== typeof role\n      || role.trim().length === 0) {\n    return\n  }\n\n  try {\n    id = Meteor.roles.insert({'name':role.trim()})\n    return id\n  } catch (e) {\n    // (from Meteor accounts-base package, insertUserDoc func)\n    // XXX string parsing sucks, maybe\n    // https://jira.mongodb.org/browse/SERVER-3069 will get fixed one day\n    if (e.name !== 'MongoError') throw e\n    match = e.err.match(/^E11000 duplicate key error index: ([^ ]+)/);\n    if (!match) throw e\n    if (match[1].indexOf('$name') !== -1)\n      throw new Meteor.Error(403, \"Role already exists.\")\n    throw e\n  }\n}\n\n/**\n * Delete an existing role.  Will throw \"Role in use\" error if any users\n * are currently assigned to the target role.\n *\n * @method deleteRole\n * @param {String} role Name of role\n */\nRoles.deleteRole = function (role) {\n  if (! role) {\n    return\n  }\n\n  var foundExistingUser = Meteor.users.findOne({roles: {$in: [role]}}, {_id: 1})\n\n  if (foundExistingUser) {\n    throw new Meteor.Error(403, 'Role in use')\n  }\n\n  var thisRole = Meteor.roles.findOne({ name: role })\n  if (thisRole) {\n    Meteor.roles.remove({ _id: thisRole._id })\n  }\n};\n\n/**\n * Add users to roles. Will create roles as needed.\n *\n * Makes 2 calls to database:\n *  1. retrieve list of all existing roles\n *  2. update users' roles\n *\n * @method addUsersToRoles\n * @param {Array|String} users id(s) of users to add to roles\n * @param {Array|String} roles name(s) of roles to add users to\n */\nRoles.addUsersToRoles = function (users, roles) {\n  if (!users) throw new Error (\"Missing 'users' param\")\n  if (!roles) throw new Error (\"Missing 'roles' param\")\n\n  var existingRoles\n\n  // ensure arrays\n  if (!_.isArray(users)) users = [users]\n  if (!_.isArray(roles)) roles = [roles]\n\n  // remove invalid roles\n  roles = _.reduce(roles, function (memo, role) {\n    if (role &&\n        'string' === typeof role &&\n        role.trim().length > 0) {\n      memo.push(role.trim())\n    }\n    return memo\n  }, [])\n\n  if (roles.length === 0) {\n    return\n  }\n\n  // ensure all roles exist in 'roles' collection\n  existingRoles = _.reduce(Meteor.roles.find({}).fetch(), function (memo, role) {\n    memo[role.name] = true\n    return memo\n  }, {})\n  _.each(roles, function (role) {\n    if (!existingRoles[role]) {\n      Roles.createRole(role)\n    }\n  })\n\n  // update all users, adding to roles set\n  if (Meteor.isClient) {\n    _.each(users, function (user) {\n      // Iterate over each user to fulfill Meteor's 'one update per ID' policy\n      Meteor.users.update(\n        {       _id: user },\n        { $addToSet: { roles: { $each: roles } } },\n        {     multi: true }\n      )\n    })\n  } else {\n    // On the server we can leverage MongoDB's $in operator for performance\n    Meteor.users.update(\n      {       _id: { $in: users } },\n      { $addToSet: { roles: { $each: roles } } },\n      {     multi: true }\n    )\n  }\n}\n\n/**\n * Remove users from roles\n *\n * @method removeUsersFromRoles\n * @param {Array|String} users id(s) of users to add to roles\n * @param {Array|String} roles name(s) of roles to add users to\n */\nRoles.removeUsersFromRoles = function (users, roles) {\n  if (!users) throw new Error (\"Missing 'users' param\")\n  if (!roles) throw new Error (\"Missing 'roles' param\")\n\n  // ensure arrays\n  if (!_.isArray(users)) users = [users]\n  if (!_.isArray(roles)) roles = [roles]\n\n  // update all users, remove from roles set\n  if (Meteor.isClient) {\n    // Iterate over each user to fulfill Meteor's 'one update per ID' policy\n    _.each(users, function (user) {\n      Meteor.users.update(\n        {      _id: user },\n        { $pullAll: { roles: roles } },\n        {    multi: true}\n      )\n    })\n  } else {\n    // On the server we can leverage MongoDB's $in operator for performance\n    Meteor.users.update(\n      {      _id: {   $in: users } },\n      { $pullAll: { roles: roles } },\n      {    multi: true}\n    )\n  }\n}\n\n/**\n * Check if user is in role\n *\n * @method userIsInRole\n * @param {String|Object} user Id of user or actual user object\n * @param {String|Array} roles Name of role or Array of roles to check against.  If array, will return true if user is in _any_ role.\n * @return {Boolean} true if user is in _any_ of the target roles\n */\nRoles.userIsInRole = function (user, roles) {\n  var id,\n      userRoles\n\n  // ensure array to simplify code\n  if (!_.isArray(roles)) {\n    roles = [roles]\n  }\n\n  if (!user) {\n    return false\n  } else if ('object' === typeof user) {\n    userRoles = user.roles\n    if (_.isArray(userRoles)) {\n      return _.some(roles, function (role) {\n        return _.contains(userRoles, role)\n      })\n    }\n    // missing roles field, try going direct via id\n    id = user._id\n  } else if ('string' === typeof user) {\n    id = user\n  }\n\n  if (!id) return false\n\n  return Meteor.users.findOne(\n    { _id: id, roles: { $in: roles } },\n    { _id: 1 }\n  )\n}\n\n/**\n * Retrieve users roles\n *\n * @method getRolesForUser\n * @param {String} user Id of user\n * @return {Array} Array of user's roles, unsorted\n */\nRoles.getRolesForUser = function (user) {\n  var user = Meteor.users.findOne(\n    { _id: user},\n    { _id: 0, roles: 1}\n  )\n\n  return user ? user.roles : undefined\n}\n\n/**\n * Retrieve all existing roles\n *\n * @method getAllRoles\n * @return {Cursor} cursor of existing roles\n */\nRoles.getAllRoles = function () {\n  return Meteor.roles.find({}, { sort: { name: 1 } })\n}\n\n/**\n * Retrieve all users who are in target role\n *\n * @method getUsersInRole\n * @param {String} role Name of role\n * @return {Cursor} cursor of users in role\n */\nRoles.getUsersInRole = function (role) {\n  return Meteor.users.find(\n    { roles: { $in: [role] } }\n  )\n}\n\n}());\n"]}